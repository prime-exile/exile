[X] - Array
[X] - critical level configuration
[X] - option for cmake EXILE_WIN_LONG_PATH/EXILE_CUSTOM_PATH_LEN
[X] - fix cmake variables 
[X] - Unix platform
[X] - Path
[X] - split path file on functions!
[X] - create tests for path
[X] - Module
[X] - test dll
[X] !! - fix critical configuration parser!
[X] - make module private for critical level specificated
[X] - make panic with format for better usage
[X] - add panics in module
[X] - fix module function names
[X] - Assert
[Y] - C++ in stage 2 
[Y] - think about c++ backend and c front for api
[X] - cpp containters
[X] - make log function in ulp
[1] - ULP
[X] - update critical!
[X] - function template class 
[X] - Class Path
[X] - Class File
[X] - Ini Lexer
[X] - Ini file compiler
[X] - Ini file interpretetor
[X] - create Ini file format
[+] - ini file enum
[X] - Language Labaratory
[X] - Plugin Loader Interface!
[X] - Runtime add Plugin Loader into plugin manager by another plugin
[X] - Native Plugin
[X/2] - plugin manager
[X] - IPlugin general
[X] - Engine instance holds PluginManager and ULP
[X] - plugin dependices!
[X] - PluginManager if plugin add loader -> check is all plugin for this types unloaded!
[UI/X] - PluginManager Unloaded Indices or reallocate vector?
[/2] - test depency manager
[?-x] - Add functional to remove plugin loader!
[X] - Give plugins access to engine instance
[X] - write plugin add new loader!
[X] - check linux plugin loading
[X] - ulp add unregister function
[X] - load all plugins from folders
[X] - make platform specific section for exile.ini plugin 
[X] - fix ini parser
[X] - test ulp
[X/2] - md files
[X] - git repository
[ ] - Versions
[ ] - exception report!
[ ] - CME Critical managment engine
[ ] - plugins load sequance
[ ] - fix file names
[ ] - check classes and add operators
[ ] - fix to do
[ ] - compiler error output!
[ ] - error handling in interpretator
[ ] - multithreading

[?] - ULP C Interface!
[ ] ! - fix error with invalid unordered map keys 



[] - thread safe
may be separate native plugin and non native plugin(lua)

and make plugin description class for with general description of plugin

like in ITC
[ ] - ScriptingPlugin


[ ] - custom antlar
[ ] - json parser
[ ] ?(if it is needs!) - critical report or some thing like this! in panic instead of simple close application
[ ] ?(if it is needs!) - unhandled exception handler!

! warning please see what you first include class like string or any std include before c include!

[ ] - critical level configuration loader default panic 
[ ] - arm64
[ ] - fast memset
